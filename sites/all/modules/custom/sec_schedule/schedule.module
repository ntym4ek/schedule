<?php

/**
 * Implements hook_init()
 */
function schedule_init()
{
  // отключаем кеширование определенных страниц
  // и разрешаем доступ только с корп ip
  if (arg(0) == 'schedule') {
    $GLOBALS['conf']['cache'] = 0;
    if (!in_array($GLOBALS["user"]->hostname, ['127.0.0.1', '77.72.142.170', '85.93.54.94', '188.170.106.46'])) {
//      watchdog('ip block', 'IP <pre>@v</pre>', array('@v' => $GLOBALS["user"]->hostname), WATCHDOG_INFO);
      drupal_not_found();
    }
  }
}

/**
 * Implements hook_cron()
 */
function schedule_cron()
{
  // выполнить импорт мероприятий
  require_once drupal_get_path('module', 'schedule') . '/includes/import.schedule.inc';

  schedule_process_incoming_files();
}

/**
 * Implements hook_menu().
 */
function schedule_menu()
{
  $items['schedule'] = array(
      'page callback' => 'schedule_page_callback',
      'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
  );
  $items['schedule/room/%'] = array(
      'page callback' => 'schedule_room_page_callback',
      'page arguments' => array(2,3),
      'access callback' => true,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * menu callback
 */
function schedule_room_page_callback($room_id, $ajax)
{
  $schedule = schedule_get_rooms_with_events(24 * 60);

  $room = $schedule['rooms'][$room_id] ?? '';

  if ($ajax == 'ajax') {
    $result = array(
      '#type' => 'ajax',
      '#commands' => [
        ajax_command_invoke('.room-content', 'replaceWith', [theme('schedule_room_content', ['room' => $room])]),
      ],
    );
    ajax_deliver($result);
    drupal_exit();
  } else {
    return theme('schedule_room_page', ['room' => $room]);
  }
}

/**
 * menu callback
 */
function schedule_page_callback($ajax)
{
  if ($ajax == 'ajax') {
    $content = schedule_get_rooms_with_events();

    $result = ['#type' => 'ajax', '#commands' => []];

    $rooms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('rooms')->vid);
    foreach($rooms as $room) {
      $room_wr = entity_metadata_wrapper('taxonomy_term', $room->tid);
      if ($room_wr->field_status->value()) {
        $html = theme('schedule_page_room_block', ['room' => $content['rooms'][$room->tid], 'is_admin' => $content['admin']]);
        $result['#commands'][] = ajax_command_invoke('.room-' . $content['rooms'][$room->tid]['index'], 'replaceWith', [$html]);
      }
    }

    ajax_deliver($result);
    drupal_exit();
  } else {
    return theme('schedule_page');
  }
}

function schedule_get_rooms_with_events()
{
  $content = [
    'admin' => user_has_role(MANAGER_RID),
  ];

  // допустимые значения для поля Этаж
  $field_floor_allowed_values = list_allowed_values(field_info_field('field_floor'));

  // массив комнат
  if ($rooms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('rooms')->vid, 0 ,null, true)) {
    foreach ($rooms as $room) {
      $content['rooms'][$room->tid] = [
        'id' => $room->tid,
        'title' => $room->name,
        'index' => $room->weight+1,
        'floor' => $room->field_floor['und'][0]['value'],
        'floor_text' => trim($field_floor_allowed_values[$room->field_floor['und'][0]['value']]),
      ];
    }
  }

  // выбрать все текущие или идущие события на сегодняшний день
  $now = REQUEST_TIME;
  if ($events = schedule_get_events_by_date($now, false)) {
    foreach ($events as $eid => $event) {
      $room_id = $event->field_room_tid;
      if (!isset($content['rooms'][$room_id]['events']) || count($content['rooms'][$room_id]['events']) < 3) {
        $content['rooms'][$room_id]['events'][$event->field_period_value] = [
          'eid' => $eid,
          'title' => $event->title,
          'description' => $event->body_value,
          'start_unix' => $event->field_period_value,
          'start' => date('H:i', $event->field_period_value),
          'finish_unix' => $event->field_period_value2,
          'finish' => date('H:i', $event->field_period_value2),
          'started' => ($now > $event->field_period_value) ? ' started' : '',
          'participants' => $event->field_participants,
        ];
      }
    }

    ksort($content['rooms'][$room_id]['events']);
  }

  return $content;
}


/**
 * Вернуть события от заданной даты до конца дня
 * @param $date - дата unix
 * @param bool $all - все или за исключением прошедших
 * @return array
 */
function schedule_get_events_by_date($date, $all = true)
{
    $query = db_select('node', 'n');
    $query->condition('n.type', 'room_event');
    $query->condition('n.status', 1);
    $query->leftJoin('field_data_field_period', 'fp', 'fp.entity_id = n.nid');
    $query->condition('fp.field_period_value2', $date, '>');
    $query->condition('fp.field_period_value', strtotime('tomorrow 1am'), '<'); //
    $query->leftJoin('field_data_body', 'fb', 'fb.entity_id = n.nid');
    $query->leftJoin('field_data_field_room', 'fr', 'fr.entity_id = n.nid');
    $query->fields('n', ['nid', 'title']);
    $query->fields('fp', ['field_period_value', 'field_period_value2']);
    $query->fields('fb', ['body_value']);
    $query->fields('fr', ['field_room_tid']);
    $query->orderBy('field_period_value');
    if ($results = $query->execute()->fetchAllAssoc('nid')) {
      foreach ($results as $eid => &$result) {
        $query = db_select('field_data_field_participants', 'fp');
        $query->condition('fp.entity_id', $result->nid);
        $query->fields('fp', ['field_participants_value']);
        $query->leftJoin('field_data_field_company', 'fc', 'fc.entity_id = fp.field_participants_value');
        $query->fields('fc', ['field_company_value']);
        $query->leftJoin('field_data_field_participants_list', 'fpl', 'fpl.entity_id = fp.field_participants_value');
        $query->fields('fpl', ['field_participants_list_value']);
        $result->field_participants = $query->execute()->fetchAllAssoc('field_participants_value');
      }
    }
    return $results;
}

/**
 * Implements hook_preprocess_page().
 */
function schedule_preprocess_page(&$vars)
{
  // сменить шаблон страницы на пустой,
  // чтобы иметь возможность развернуться на весь экран
  if (arg(0) == 'schedule') {
    $vars['theme_hook_suggestions'][] = 'page__empty';
    drupal_add_css(drupal_get_path('module', 'schedule') . '/css/schedule.module.css');
    drupal_add_js(drupal_get_path('module', 'schedule') . '/js/schedule.autorefresh.js');

    drupal_add_library('system', 'drupal.ajax');
  }
}

